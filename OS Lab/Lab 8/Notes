Banker's algorithm:
-> algorithm used for deadlock avoidnce in resource-allocation graph with 
multiple instances of each resource type
-> n = number of processes and m = number of resource types

-> available = 1D array of size 'm', indicating the number of available resources of each type
-> available[j] = k means that there are k instances of resource type Rj

-> max:
  -> 2D array of size 'n x m', that specifies the maximum demand of each process in a system
  -> max[i,j] = k means that process Pi requesta at most, k instances of resource type Rj
 
-> allocation
  -> 2D array of size n x m that specifies the number of resources of each type currently
  allocated to each process
  -> Allocation[i,j] = k means process Pi is currently allocated k instances of resource type Rj
  
  -> need 
    -> 2D array of size n x m that indicates the remaining resource needs of each process
    -> need[i,j] = k means process Pi currently needs k instances of resource type Rj for it's execution
    
   -> need[i,j] = max[i,j] - allocation[i,j]
   -> allocationi specifies resources currently allocated to process Pi
   -> needi specifies additional resources that process Pi needs
   
   Safety Algorithm:
   1. let work and finish be vectors of length of m and n respectively
   
  initialize:
  work = available
  finish[i] = flase, for i=0,1,2,3,4,...n-1
  
  2. Find an i such that both:
    a) finish[i] = false
    b) needi <= work
    
  3. Work = work + allocation[i]
     finishi = true
     goto step 2
     
  4. if finish[i] = true for all i
    then system is in safe state
    
 Request Resource algorithm:
 1. if request[i] <= need[i]
 goto step (2)
 otherwise, raise an error condition since process has exceeded it's maximum claim
 
 2. if request[i] <= available[i]
  go to step 3
  else Pi must wait, since resource is not available
  
 3. available = available - request[i]
    allocation[i] = allocation[i] + request[i]
    need[i] = need[i] - request[i]
    
  
